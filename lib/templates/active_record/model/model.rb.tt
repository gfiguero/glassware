<% module_namespacing do -%>
class <%= class_name %> < <%= parent_class_name.classify %>
<% if defined?(v1_table_name) -%>
  self.table_name = "<%= v1_table_name %>"
  include SortableScopes
  include FilterScopes
<% end -%>
<% if attributes.map(&:name).include? 'deleted_at' -%>
  acts_as_paranoid
<% end -%>
<% attributes.select(&:reference?).each do |attribute| -%>
<% if attribute.attr_options[:many_to_many] -%>
  has_many :<%= attribute.attr_options.keys.last %>, dependent: :destroy
  has_many :<%= attribute.name %>, through: :<%= attribute.attr_options.keys.last %>
<% else -%>
  belongs_to :<%= attribute.name %><%= ", polymorphic: true" if attribute.polymorphic? %>
<% end -%>
<% end -%>
<% attributes.select(&:rich_text?).each do |attribute| -%>
  has_rich_text :<%= attribute.name %>
<% end -%>
<% attributes.select(&:attachment?).each do |attribute| -%>
  has_one_attached :<%= attribute.name %>
<% end -%>
<% attributes.select(&:attachments?).each do |attribute| -%>
  has_many_attached :<%= attribute.name %>
<% end -%>
<% attributes.select(&:token?).each do |attribute| -%>
  has_secure_token<% if attribute.name != "token" %> :<%= attribute.name %><% end %>
<% end -%>
<% if attributes.any?(&:password_digest?) -%>
  has_secure_password
<% end -%>
<% if class_name == 'Role' -%>
  def resource
    name.split('#', 2).first.split('/', 2).last.to_sym
  end

  def action
    name.split('#', 2).last.to_sym
  end
<%- end -%>
end
<% end -%>
